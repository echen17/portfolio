{"metadata":{"name":"w2v","user_save_timestamp":"1969-12-31T19:00:00.000Z","auto_save_timestamp":"1969-12-31T19:00:00.000Z","language_info":{"name":"scala","file_extension":"scala","codemirror_mode":"text/x-scala"},"trusted":true,"customLocalRepo":null,"customRepos":null,"customDeps":null,"customImports":null,"customArgs":null,"customSparkConf":null},"cells":[{"metadata":{"id":"C29BED0E42924D65A77253B72456BFB6"},"cell_type":"markdown","source":"# Embedded word vectors in Spark\n\n## Preparing your corpus\n\nCreating an embedded word vector model in Scala is very straightforward with the Spark libraries imported in the following cell.  \n\nYou should use the *parsed* or *stemmed* version of your text.  Create a file in your file system consisting of one line for each chunk of text, containing just the stemmed text.\n"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"5C753E3A2BFF4ED98ECB09964AF9FD0D"},"cell_type":"code","source":"import org.apache.spark.mllib.feature.Word2Vec\nimport org.apache.spark.mllib.feature.Word2VecModel\n\nval txt= \"/Users/nsmith/Desktop/caesar-column2.txt\"","outputs":[{"name":"stdout","output_type":"stream","text":"import org.apache.spark.mllib.feature.Word2Vec\nimport org.apache.spark.mllib.feature.Word2VecModel\ntxt: String = /Users/nsmith/Desktop/caesar-column2.txt\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":4,"time":"Took: 1 second 453 milliseconds, at 2016-11-22 11:57"}]},{"metadata":{"id":"2DCC21E5FF814BEF8944B4A28322C714"},"cell_type":"markdown","source":"## Creating an embedded word vector model\n\nIn the following three lines, `sc` is the Spark Context -- the cluster computing environment that Spark notebook automatically makes avaialble.  Its `textFile` method creates a distributed data store out of the local text file.  We use generic Scala functions to then map each line (a String value) in the distributed data store to a sequence of words by splitting the string on white space.\n\nThe next two lines create a `Word2Vec` object, and create an embedded word vector model with its `fit` function.  That's it!"},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"presentation":{"tabs_state":"{\n  \"tab_id\": \"#tab1962204660-1\"\n}","pivot_chart_state":"{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"},"id":"F943809667D044089EA5FD55B9E30FFD"},"cell_type":"code","source":"val input = sc.textFile(txt).map(line => line.split(\"\\\\W\").toSeq)\nval word2vec = new Word2Vec()\nval model = word2vec.fit(input)\n","outputs":[{"name":"stdout","output_type":"stream","text":"input: org.apache.spark.rdd.RDD[Seq[String]] = MapPartitionsRDD[17] at map at <console>:82\nword2vec: org.apache.spark.mllib.feature.Word2Vec = org.apache.spark.mllib.feature.Word2Vec@15197518\nmodel: org.apache.spark.mllib.feature.Word2VecModel = org.apache.spark.mllib.feature.Word2VecModel@27a36a1b\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":5,"time":"Took: 5 seconds 960 milliseconds, at 2016-11-22 11:57"}]},{"metadata":{"id":"2525E92D02524F278EA08C6E1E534FC1"},"cell_type":"markdown","source":"## Exploring the model\n\nNow you can explore the model.  In the following cell, define a term, and the number of terms to display.  "},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"A33ACD45AF75408E94B97C6B60C0638C"},"cell_type":"code","source":"val term = \"peace\"\nval neighbors = 10\n\nval synonyms = model.findSynonyms (term,neighbors)\nfor((synonym, cosineSimilarity) <- synonyms) {\n  println(s\"$synonym $cosineSimilarity\")\n}","outputs":[{"name":"stdout","output_type":"stream","text":"service 0.9121872668712111\nsomewhat 0.8907720512157452\nburden 0.8732115604731019\ndependants 0.857570873301423\npractice 0.8529854763118085\nmeans 0.8508975096705665\nestablished 0.8482925919886158\ndestitute 0.844796061507014\nmove 0.8390411655101394\nalone 0.8385494474061564\nterm: String = peace\nneighbors: Int = 10\nsynonyms: Array[(String, Double)] = Array((service,0.9121872668712111), (somewhat,0.8907720512157452), (burden,0.8732115604731019), (dependants,0.857570873301423), (practice,0.8529854763118085), (means,0.8508975096705665), (established,0.8482925919886158), (destitute,0.844796061507014), (move,0.8390411655101394), (alone,0.8385494474061564))\n"},{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":6,"time":"Took: 2 seconds 128 milliseconds, at 2016-11-22 11:57"}]},{"metadata":{"trusted":true,"input_collapsed":false,"collapsed":false,"id":"BC147568730440F487462E52806FD63D"},"cell_type":"code","source":"","outputs":[{"metadata":{},"data":{"text/html":""},"output_type":"execute_result","execution_count":7,"time":"Took: 1 second 703 milliseconds, at 2016-11-22 11:57"}]}],"nbformat":4}